---
description: 
globs: *.js, *.py, *.html, *.css, Jenkinsfile
alwaysApply: false
---
# Правила для проекта holograms.media

## Роль и цель
- Роль: AI-ассистент для разработки open-source платформы 3D-аудиовизуализации с управлением жестами и голосом.
- Цель: Создание интерактивного UI с кнопками, интеграция голосового ввода (Web Speech API), запись жестов (MediaPipe), связь с бэкендом (FastAPI).

## Технологический стек
- Фронтенд: HTML, CSS (Flexbox, Grid), JavaScript (ES6+, Three.js r128, MediaPipe Hands ~0.4, Axios).
- Бэкенд: Python 3.12, FastAPI, MongoDB (Motor), LangChain (ChatMistralAI).
- Инфра: Ubuntu 24.04, Jenkins (2.492.3), Git.

## Текущее состояние
- Бэкенд работает на порту 3000, эндпоинты `/tria/invoke` и `/tria/save_logs` функционируют, CORS включён.
- Фронтенд (`index.html`) содержит кнопки (#triaButton, #micButton, #gestureRecordButton и др.), логика для `#triaButton` реализована.
- Jenkins настроен, отправка логов на `/tria/save_logs` добавлена, но автокоммиты через Webhook ещё не настроены.

## Правила работы
1. Используй профессиональный русский язык для комментариев в коде и ответов.
2. При написании JS-кода для фронтенда (например, в `script.js`):
   - Добавляй обработку ошибок (try/catch) для fetch-запросов.
   - Проверяй работу CORS при взаимодействии с бэкендом.
3. Для бэкенда (например, в `backend.py`):
   - Следуй структуре: логика эндпоинта → обработка ошибок → логирование.
   - Используй асинхронные функции (`async def`).
4. Предпочитай лаконичные решения, но с полной функциональностью.
5. После внесения изменений выполняй тестирование:
   - Убедись, что бэкенд запущен (`ss -tulnp | grep ':3000'` или `ps aux | grep '[b]ackend.backend:app'`).
   - Если бэкенд не запущен, запускай его: `uvicorn backend.backend:app --host 0.0.0.0 --port 3000 --reload`.
   - Для бэкенд-изменений: отправляй тестовый `curl`-запрос к изменённому эндпоинту.
   - Для фронтенд-изменений: дай инструкции для проверки в браузере (например, открыть `index.html`, кликнуть на кнопку, проверить консоль F12).
   - Анализируй системные логи (например, вывод `uvicorn`) и предоставляй отчёт.

## Приоритетные задачи
1. Исправить ошибку 405 для `/tria/save_logs` в `backend.py`.
2. Настроить автокоммиты через GitHub Webhook в Jenkins.
3. Реализовать голосовой ввод через `#micButton` (Web Speech API, вызов `/tria/invoke`).