syntax = "proto3";

package nethologlyph;

import "google/protobuf/timestamp.proto"; // For precise timestamping

// Common geometric types
message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quaternion {
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4; // Scalar component, typically last
}

// Core Holographic Symbol representation
message HolographicSymbol {
    string symbol_id = 1; // Unique identifier for this symbol instance
    string type = 2; // e.g., "cube", "sphere", "text_label", "custom_model_uri"
    Vector3 position = 3;
    Quaternion orientation = 4;
    Vector3 scale = 5;
    string material_properties_json = 6; // JSON string for material (color, texture, etc.)
    bytes custom_data = 7; // For application-specific binary data
    google.protobuf.Timestamp last_updated = 8; // Timestamp of last modification
    optional string code_language = 9; // For "Liquid Code" context
    optional string embedding_model_version = 10; // For "Liquid Code" context
}

// Represents a chunk of gestural data
message GestureChunk {
    string gesture_id = 1; // Unique ID for this specific gesture event or segment
    string user_id = 2; // User performing the gesture
    google.protobuf.Timestamp timestamp = 3; // Timestamp of the gesture event
    string recognized_gesture_type = 4; // High-level type, e.g., "pinch_start", "swipe_left"
    float confidence = 5; // Confidence score for the recognition
    repeated float landmark_data_3d = 6; // Flattened array of 3D landmark coordinates (e.g., 21 hand landmarks * 3 coords = 63 floats)
    string source_modality = 7; // e.g., "MediaPipe_Web", "WebXR_HandInput"
    optional string gesture_sequence_id = 8; // To group segments of a continuous gesture
    optional bool is_continuous_gesture_segment = 9; // True if part of an ongoing gesture
    optional string temporal_spatial_metadata_json = 10; // JSON for richer data like trajectory, speed
}

// For Tria's internal state synchronization or updates to clients
message TriaStateUpdate {
    string state_key = 1; // e.g., "current_mood", "active_task_id", "learning_progress_percent"
    string state_value_json = 2; // JSON string representing the state value (flexible)
    google.protobuf.Timestamp timestamp = 3;
    optional string bot_id = 4; // Which bot's state is being updated, if applicable
}

// Example of a specific, simple HoloGlyph type: 3D Emoji
message ThreeDEmoji {
    string emoji_id = 1; // Unique ID for this emoji instance
    string type = 2; // e.g., "smiley_face_holo", "thumbs_up_3d_animated"
    Vector3 position = 3;
    Quaternion orientation = 4;
    optional float animation_speed = 5; // Speed for animated emojis
    google.protobuf.Timestamp timestamp = 6;
}

// Example for sending audio visualization data
message AudioVisualizationState {
    string stream_id = 1; // ID of the audio stream being visualized
    repeated float frequency_bands = 2; // Array of frequency band values
    float overall_intensity = 3; // Overall intensity or volume level
    google.protobuf.Timestamp timestamp = 4;
}

// Wrapper message for all NetHoloGlyph communications
// This allows for sending various types of payloads over a single WebSocket connection (or other transport)
message NetHoloPacket {
    string packet_id = 1; // Unique ID for this packet (e.g., UUID)
    google.protobuf.Timestamp timestamp = 2; // Timestamp of packet creation
    string source_id = 3; // Identifier of the client, user, or service sending the packet

    oneof payload {
        HolographicSymbol holo_symbol = 4;
        GestureChunk gesture_chunk = 5;
        TriaStateUpdate tria_state = 6;
        ThreeDEmoji emoji = 7;
        AudioVisualizationState audio_viz = 8;
        // Future message types can be added here
        // UserInputCommand user_input_command = 9;
        // EnvironmentUpdate environment_update = 10;
        // ErrorMessage error_message = 11;
    }
}
