from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime
import uuid

class DBBaseModel(BaseModel):
    """
    A base model for database interaction that includes common fields.
    Can be inherited by other Pydantic models representing database table rows.
    """
    id: int = Field(..., description="Primary key, typically auto-generated by the database.")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of creation (UTC).")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of last update (UTC).")

    class Config:
        orm_mode = True # Allows Pydantic to work with ORM objects
        # Using `alias_generator` can be helpful if your DB columns have different naming conventions
        # e.g., camelCase in Python and snake_case in SQL.
        # However, for this project, we'll aim for consistent naming if possible.


class UUIDDBBaseModel(BaseModel):
    """
    A base model for database interaction where the primary key is a UUID.
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4, description="Primary key, UUID.")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of creation (UTC).")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of last update (UTC).")

    class Config:
        orm_mode = True

# You can also define common field types or configurations here if needed.
# For example, a custom Field type for UUIDs or specific string constraints.

# Example of a model that could inherit from DBBaseModel:
# class MyTableModel(DBBaseModel):
#     name: str
#     description: Optional[str] = None

# If many models share a user_id (Firebase UID), you could consider a base for that too:
# class UserOwnedModelBase(BaseModel):
#     user_id: str = Field(..., description="Firebase UID of the owner/user.")
#
# class MyUserOwnedData(UserOwnedModelBase, DBBaseModel): # Example of multiple inheritance
#     data_field: str
```
