from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
import uuid

# AZR Task Statuses (as per CHECK constraint in schemas.sql)
AZR_TASK_STATUSES = Literal['pending', 'active', 'evaluating', 'completed_success', 'completed_failure', 'aborted']

# Base model for TriaAZRTask, used for creation (fields with defaults or generated by DB are optional here)
class TriaAZRTaskBase(BaseModel):
    description_text: str
    status: AZR_TASK_STATUSES = Field(default='pending')
    priority: Optional[int] = Field(default=0)
    complexity_score: Optional[float] = None
    generation_source: Optional[str] = None
    related_bot_id: Optional[str] = None
    metadata_json: Optional[Dict[str, Any]] = Field(default_factory=dict)

# Model for creating a new TriaAZRTask
class TriaAZRTaskCreate(TriaAZRTaskBase):
    pass

# Model representing a TriaAZRTask as stored in the DB (includes DB-generated fields)
class TriaAZRTaskDB(TriaAZRTaskBase):
    task_id: int
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

    class Config:
        orm_mode = True

# AZR Task Solution Verification Statuses
AZR_SOLUTION_VERIFICATION_STATUSES = Literal['pending', 'verified_success', 'verified_failure', 'verification_failed_to_run']

# Base model for TriaAZRTaskSolution, used for creation
class TriaAZRTaskSolutionBase(BaseModel):
    task_id: int
    solution_approach_description: Optional[str] = None
    solution_artifacts_json: Optional[Dict[str, Any]] = Field(default_factory=dict) # JSONB in DB
    outcome_summary: Optional[str] = None
    performance_metrics_json: Optional[Dict[str, Any]] = Field(default_factory=dict) # JSONB in DB
    verification_status: AZR_SOLUTION_VERIFICATION_STATUSES = Field(default='pending')

# Model for creating a new TriaAZRTaskSolution
class TriaAZRTaskSolutionCreate(TriaAZRTaskSolutionBase):
    pass

# Model representing a TriaAZRTaskSolution as stored in the DB
class TriaAZRTaskSolutionDB(TriaAZRTaskSolutionBase):
    solution_id: int
    created_at: datetime

    class Config:
        orm_mode = True

# Base model for TriaLearningLogEntry, used for creation
class TriaLearningLogEntryBase(BaseModel):
    event_type: str
    bot_affected_id: Optional[str] = None
    summary_text: str
    details_json: Optional[Dict[str, Any]] = Field(default_factory=dict) # JSONB in DB

# Model for creating a new TriaLearningLogEntry
class TriaLearningLogEntryCreate(TriaLearningLogEntryBase):
    pass

# Model representing a TriaLearningLogEntry as stored in the DB
class TriaLearningLogEntryDB(TriaLearningLogEntryBase):
    log_id: int
    timestamp: datetime # Handled by DB default CURRENT_TIMESTAMP

    class Config:
        orm_mode = True

# Base model for TriaBotConfiguration, used for creation
class TriaBotConfigurationBase(BaseModel):
    bot_id: str = Field(..., description="Identifier for the bot (e.g., 'GestureBot', 'AudioBot')")
    config_parameters_json: Dict[str, Any] # JSONB in DB
    last_updated_by: Optional[str] = Field(default='system')
    notes: Optional[str] = None

# Model for creating a new TriaBotConfiguration (version managed by DB or logic)
class TriaBotConfigurationCreate(TriaBotConfigurationBase):
    pass
    # current_version is usually handled by application logic or DB trigger on update

# Model representing a TriaBotConfiguration as stored in the DB
class TriaBotConfigurationDB(TriaBotConfigurationBase):
    config_id: int
    current_version: int = Field(default=1)
    updated_at: datetime # Handled by DB default CURRENT_TIMESTAMP

    class Config:
        orm_mode = True

# Literal type for Python 3.8+ if needed for status fields, or use Enum
from typing import Literal
AZR_TASK_STATUSES = Literal['pending', 'active', 'evaluating', 'completed_success', 'completed_failure', 'aborted']
AZR_SOLUTION_VERIFICATION_STATUSES = Literal['pending', 'verified_success', 'verified_failure', 'verification_failed_to_run']

# Re-define models using Literal for status fields if using Python 3.8+
# For compatibility, the string check in SQL is the main enforcer.
# Pydantic will also validate against these literals if used.

class TriaAZRTaskBase(BaseModel): # Re-defined with Literal
    description_text: str
    status: AZR_TASK_STATUSES = Field(default='pending')
    priority: Optional[int] = Field(default=0)
    complexity_score: Optional[float] = None
    generation_source: Optional[str] = None
    related_bot_id: Optional[str] = None
    metadata_json: Optional[Dict[str, Any]] = Field(default_factory=dict)

class TriaAZRTaskCreate(TriaAZRTaskBase):
    pass

class TriaAZRTaskDB(TriaAZRTaskBase):
    task_id: int
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

    class Config:
        orm_mode = True
        
class TriaAZRTaskSolutionBase(BaseModel): # Re-defined with Literal
    task_id: int
    solution_approach_description: Optional[str] = None
    solution_artifacts_json: Optional[Dict[str, Any]] = Field(default_factory=dict)
    outcome_summary: Optional[str] = None
    performance_metrics_json: Optional[Dict[str, Any]] = Field(default_factory=dict)
    verification_status: AZR_SOLUTION_VERIFICATION_STATUSES = Field(default='pending')

class TriaAZRTaskSolutionCreate(TriaAZRTaskSolutionBase):
    pass

class TriaAZRTaskSolutionDB(TriaAZRTaskSolutionBase):
    solution_id: int
    created_at: datetime

    class Config:
        orm_mode = True

# TriaCodeEmbeddings models (from schemas.sql)
class TriaCodeEmbeddingBase(BaseModel):
    component_id: str = Field(..., description="Unique identifier (e.g., function path, module name)")
    source_code_reference: Optional[str] = None
    embedding_vector: List[float] # Assuming vector is List[float]
    semantic_description: Optional[str] = None
    dependencies: Optional[Dict[str, Any]] = Field(default_factory=dict) # JSONB in DB
    version: Optional[str] = None

class TriaCodeEmbeddingCreate(TriaCodeEmbeddingBase):
    pass

class TriaCodeEmbeddingDB(TriaCodeEmbeddingBase):
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True

# For use in other models if needed
# from backend.models.user_models import UserPublic # Example if user info is needed in AZR tasks/logs
# from backend.models.hologram_models import UserHologram # Example
```
