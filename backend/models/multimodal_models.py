from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
import uuid

# Aligns with the 'audiovisual_gestural_chunks' table in schemas.sql
# This model is for data creation, so DB-generated fields like 'id', 'created_at', 'updated_at' are not here.
class InteractionChunkBase(BaseModel):
    session_id: Optional[str] = Field(None, max_length=255, description="Identifier for a user session")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of the interaction")
    
    # References to media files (IDs from media_files table)
    audio_file_id: Optional[int] = None
    video_file_id: Optional[int] = None
    
    hand_landmarks: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Raw hand landmark data")
    gesture_classification_client: Optional[str] = Field(None, description="Client-side initial gesture classification")
    gesture_confidence_client: Optional[float] = Field(None, ge=0.0, le=1.0, description="Client-side confidence for the classification")
    speech_transcription_client: Optional[str] = Field(None, description="Client-side speech transcription")
    environment_context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Contextual information about the user's environment")
    
    user_feedback_rating: Optional[int] = Field(None, ge=1, le=5, description="User rating for Tria's response (e.g., 1-5 stars)")
    user_feedback_text: Optional[str] = Field(None, description="User textual feedback")
    user_flagged_issue: Optional[bool] = Field(default=False, description="Whether the user flagged an issue")
    
    tria_processed_flag: Optional[bool] = Field(default=False, description="Whether Tria has fully processed this chunk")
    processing_tags: Optional[List[str]] = Field(default_factory=list, description="Tags added during processing by Tria")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Other miscellaneous metadata")
    raw_data_blob: Optional[Dict[str, Any]] = Field(default_factory=dict, description="For any other raw data associated with the chunk")
    
    # chunk_embedding is handled separately, often generated by a service after creation.

class InteractionChunkCreate(InteractionChunkBase):
    user_id: str # Firebase UID, added at the service layer before DB insertion
    # This model is used when receiving data to create a new chunk.

class InteractionChunkDB(InteractionChunkBase):
    id: int # Primary key, DB-generated
    user_id: str # Firebase UID
    chunk_embedding: Optional[List[float]] = None # Stored in DB, dimension e.g., 1536
    # created_at and updated_at are typically handled by DB defaults or app logic on save

    class Config:
        orm_mode = True

# Model for API response when requesting a chunk, may include more processed data
class InteractionChunkPublic(InteractionChunkDB):
    # You might add fields here that are derived or populated after initial storage,
    # e.g., links to processed results, a more detailed gesture interpretation.
    # For now, it's the same as DB model.
    pass

# Model for representing a media file, aligning with 'media_files' table
class MediaFileBase(BaseModel):
    file_name: str = Field(..., max_length=255)
    storage_path: str = Field(..., max_length=1024, description="Full path in Cloud Storage")
    file_type: Optional[str] = Field(None, max_length=100, description="MIME type or general type")
    file_size_bytes: Optional[int] = Field(None, ge=0)
    duration_seconds: Optional[float] = Field(None, ge=0.0, description="For audio/video files")
    resolution_width: Optional[int] = Field(None, ge=0, description="For video/image files")
    resolution_height: Optional[int] = Field(None, ge=0, description="For video/image files")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Other specific metadata")

class MediaFileCreate(MediaFileBase):
    user_id: Optional[str] = None # Firebase UID of uploader/owner

class MediaFileDB(MediaFileBase):
    id: int
    user_id: Optional[str] = None # Firebase UID
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
