"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.knowledgeBaseStatus = exports.testKnowledgeBase = exports.askKnowledgeBase = exports.knowledgeBaseIndexer = exports.ai = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs/promises"));
const genkit_1 = require("genkit");
const googleai_1 = require("@genkit-ai/googleai");
const dev_local_vectorstore_1 = require("@genkit-ai/dev-local-vectorstore");
const firebase_1 = require("@genkit-ai/firebase");
const text_1 = require("langchain/document_loaders/fs/text");
const text_splitter_1 = require("langchain/text_splitter");
const retriever_1 = require("@genkit-ai/ai/retriever");
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
// –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –¥–ª—è CLI —Ä–µ–∂–∏–º–∞
if (process.env.NODE_ENV === 'production') {
    (0, firebase_1.enableFirebaseTelemetry)();
}
// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2]
exports.ai = (0, genkit_1.genkit)({
    plugins: [
        (0, googleai_1.googleAI)(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GEMINI_API_KEY –∏–ª–∏ GOOGLE_API_KEY
        (0, dev_local_vectorstore_1.devLocalVectorstore)([
            {
                indexName: 'holograms_media_knowledge',
                embedder: googleai_1.textEmbedding004, // ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2]
            },
        ]),
    ],
});
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2]
const embeddingModel = googleai_1.textEmbedding004;
const generativeModel = googleai_1.gemini15Flash;
const indexer = (0, dev_local_vectorstore_1.devLocalIndexerRef)('holograms_media_knowledge');
const retriever = (0, dev_local_vectorstore_1.devLocalRetrieverRef)('holograms_media_knowledge');
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const SYSTEM_PROMPT = `–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏ —É—á–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ "holograms.media".
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ–¥–∏–∞, 
–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –æ—Å–Ω–æ–≤–µ 
–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞.

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—á–∏—Ç–µ–ª—å —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.`;
const RAG_TEMPLATE = `### –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô ###
{context}

### –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ###
{question}

### –ò–ù–°–¢–†–£–ö–¶–ò–Ø ###
–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ–±—É—á–∞—é—â–∏–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`;
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FLOWS –¥–ª—è CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* 1. ‚úÖ –û–°–ù–û–í–ù–û–ô FLOW –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ CLI */
exports.knowledgeBaseIndexer = exports.ai.defineFlow({
    name: 'knowledgeBaseIndexer',
    inputSchema: genkit_1.z.object({
        resumeFromBatch: genkit_1.z.number()
            .min(0)
            .max(1000)
            .optional()
            .default(0)
            .describe('–ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (0 = –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞)'),
        batchSize: genkit_1.z.number()
            .min(10)
            .max(100)
            .optional()
            .default(25)
            .describe('–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–µ–Ω—å—à–µ = —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)'),
    }),
    outputSchema: genkit_1.z.string(),
}, async ({ resumeFromBatch = 0, batchSize = 25 }) => {
    const startTime = Date.now();
    const rootDir = path.resolve(process.cwd(), '../GoogleAIStudio');
    console.log('üöÄ –ó–ê–ü–£–°–ö –ò–ù–î–ï–ö–°–ê–¶–ò–ò –ß–ï–†–ï–ó GENKIT CLI');
    console.log(`üéØ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: text-embedding-004 (768 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π)`);
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: resumeFromBatch=${resumeFromBatch}, batchSize=${batchSize}`);
    if (resumeFromBatch === 0) {
        console.log('üìÅ –≠–¢–ê–ü 1/4: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', rootDir);
    }
    else {
        console.log(`üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï —Å –ø–∞–∫–µ—Ç–∞ ${resumeFromBatch + 1}`);
    }
    // ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä .txt —Ñ–∞–π–ª–æ–≤
    async function collectTxtFiles(dir) {
        try {
            const entries = await fs.readdir(dir, { withFileTypes: true });
            const files = await Promise.all(entries.map(async (ent) => {
                const full = path.join(dir, ent.name);
                if (ent.isDirectory()) {
                    return await collectTxtFiles(full);
                }
                else if (full.endsWith('.txt')) {
                    return [full];
                }
                else {
                    return [];
                }
            }));
            return files.flat();
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error);
            return [];
        }
    }
    const filePaths = await collectTxtFiles(rootDir);
    if (filePaths.length === 0) {
        console.log('‚ùå .txt —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.');
        return 'üîç .txt —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.';
    }
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${filePaths.length} .txt —Ñ–∞–π–ª–æ–≤`);
    // ‚úÖ –≠–¢–ê–ü 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    let docs = [];
    const cacheFile = path.resolve(process.cwd(), 'chunks_cache.json');
    if (resumeFromBatch === 0) {
        console.log('üîÑ –≠–¢–ê–ü 2/4: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...');
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        for (let i = 0; i < filePaths.length; i++) {
            const fp = filePaths[i];
            try {
                const loader = new text_1.TextLoader(fp);
                const loaded = await loader.load();
                docs.push(...loaded);
                const fileName = path.basename(fp);
                const progress = `[${i + 1}/${filePaths.length}]`;
                console.log(`üìÑ ${progress} ${fileName} (${loaded.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
            }
            catch (e) {
                const fileName = path.basename(fp);
                const progress = `[${i + 1}/${filePaths.length}]`;
                console.warn(`‚ö†Ô∏è  ${progress} –ü—Ä–æ–ø—É—Å–∫ ${fileName}: ${String(e).substring(0, 100)}`);
            }
        }
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${docs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        // ‚úÖ –≠–¢–ê–ü 3: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è text-embedding-004)
        console.log('‚úÇÔ∏è  –≠–¢–ê–ü 3/4: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏...');
        const splitter = new text_splitter_1.RecursiveCharacterTextSplitter({
            chunkSize: 4000, // ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è text-embedding-004 (2048 —Ç–æ–∫–µ–Ω–æ–≤)
            chunkOverlap: 400, // 10% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
            separators: ['\n\n', '\n', '. ', '! ', '? ', ' ', ''],
        });
        const chunks = await splitter.splitDocuments(docs);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è text-embedding-004)`);
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è Resume —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const chunksData = chunks.map((c) => ({
            pageContent: c.pageContent,
            metadata: {
                ...c.metadata,
                source: c.metadata?.source ?? 'unknown',
                chunkIndex: chunks.indexOf(c)
            }
        }));
        try {
            await fs.writeFile(cacheFile, JSON.stringify(chunksData, null, 2));
            console.log('üíæ –ß–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ chunks_cache.json –¥–ª—è Resume —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
        }
        catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à —á–∞–Ω–∫–æ–≤:', e);
        }
    }
    else {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è Resume
        console.log('üìÇ –≠–¢–ê–ü 2/4: –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞...');
        try {
            const cachedData = await fs.readFile(cacheFile, 'utf-8');
            const chunksData = JSON.parse(cachedData);
            docs = chunksData; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chunksData.length} —á–∞–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞`);
        }
        catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —á–∞–Ω–∫–æ–≤:', e);
            return '–û—à–∏–±–∫–∞: –∫—ç—à —á–∞–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å resumeFromBatch: 0';
        }
    }
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Genkit Documents
    let genkitDocs;
    if (resumeFromBatch === 0) {
        const chunks = docs;
        genkitDocs = chunks.map((c) => retriever_1.Document.fromText(c.pageContent, {
            ...c.metadata,
            source: c.metadata?.source ?? 'unknown',
        }));
    }
    else {
        genkitDocs = docs.map((c) => retriever_1.Document.fromText(c.pageContent, c.metadata || { source: 'unknown' }));
    }
    // ‚úÖ –≠–¢–ê–ü 4: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ Genkit
    console.log('üß† –≠–¢–ê–ü 4/4: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ Genkit + text-embedding-004');
    const totalBatches = Math.ceil(genkitDocs.length / batchSize);
    const startBatch = resumeFromBatch;
    const remainingBatches = totalBatches - startBatch;
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${genkitDocs.length}`);
    console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batchSize}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: ${totalBatches}`);
    console.log(`   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–∞–∫–µ—Ç–∞: ${startBatch + 1}`);
    console.log(`   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${remainingBatches} –ø–∞–∫–µ—Ç–æ–≤`);
    const embeddingStart = Date.now();
    let processedBatches = 0;
    // ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å Genkit API
    for (let i = startBatch * batchSize; i < genkitDocs.length; i += batchSize) {
        const batch = genkitDocs.slice(i, i + batchSize);
        const batchNumber = Math.floor(i / batchSize) + 1;
        console.log(`üì¶ –ü–∞–∫–µ—Ç ${batchNumber}/${totalBatches} (${batch.length} —á–∞–Ω–∫–æ–≤)`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–∞–∫–µ—Ç–æ–≤
        if (processedBatches > 0 && processedBatches % 5 === 0) {
            const elapsed = (Date.now() - embeddingStart) / 1000 / 60;
            const rate = processedBatches / elapsed;
            const remainingTime = (totalBatches - batchNumber) / rate;
            console.log(`   ‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: ${rate.toFixed(2)} –ø–∞–∫–µ—Ç–æ–≤/–º–∏–Ω`);
            console.log(`   ‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${remainingTime.toFixed(1)} –º–∏–Ω`);
        }
        try {
            // ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Genkit indexer (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2])
            await exports.ai.index({
                indexer,
                documents: batch
            });
            const progress = ((batchNumber / totalBatches) * 100).toFixed(1);
            console.log(`‚úÖ –ü–∞–∫–µ—Ç ${batchNumber} –∑–∞–≤–µ—Ä—à–µ–Ω (${progress}%)`);
            processedBatches++;
            // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 10 –ø–∞–∫–µ—Ç–æ–≤
            if (batchNumber % 10 === 0) {
                console.log(`üéØ –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –¢–û–ß–ö–ê: ${batchNumber}/${totalBatches} –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
                console.log(`üíæ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: resumeFromBatch: ${batchNumber}`);
            }
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if (batchNumber < totalBatches) {
                await new Promise(resolve => setTimeout(resolve, 500)); // –ú–µ–Ω—å—à–µ –ø–∞—É–∑—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            }
        }
        catch (error) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê –≤ –ø–∞–∫–µ—Ç–µ ${batchNumber}:`, error);
            console.log(`üîÑ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
            console.log(`   resumeFromBatch: ${batchNumber - 1}`);
            return `‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ ${batchNumber}. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: resumeFromBatch: ${batchNumber - 1}`;
        }
    }
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const embeddingTime = ((Date.now() - embeddingStart) / 1000 / 60).toFixed(1);
    const totalTime = ((Date.now() - startTime) / 1000 / 60).toFixed(1);
    console.log(`üéâ –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º–∏–Ω`);
    console.log(`   ‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${embeddingTime} –º–∏–Ω`);
    console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: ${genkitDocs.length}`);
    console.log(`   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${filePaths.length}`);
    console.log(`   ‚Ä¢ –ú–æ–¥–µ–ª—å: text-embedding-004 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)`);
    console.log(`üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ __db_holograms_media_knowledge.json`);
    console.log(`üöÄ AI-—É—á–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
    // –£–¥–∞–ª—è–µ–º –∫—ç—à —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try {
        await fs.unlink(cacheFile);
        console.log('üßπ –ö—ç—à —á–∞–Ω–∫–æ–≤ –æ—á–∏—â–µ–Ω');
    }
    catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }
    return `‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalTime} –º–∏–Ω! ${genkitDocs.length} —á–∞–Ω–∫–æ–≤ –∏–∑ ${filePaths.length} —Ñ–∞–π–ª–æ–≤.`;
});
/* 2. ‚úÖ AI-—É—á–∏—Ç–µ–ª—å —Å RAG –ø–æ–∏—Å–∫–æ–º */
exports.askKnowledgeBase = exports.ai.defineFlow({
    name: 'askKnowledgeBase',
    inputSchema: genkit_1.z.object({
        query: genkit_1.z.string().describe('–í–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É holograms.media'),
        contextChunks: genkit_1.z.number()
            .min(1)
            .max(20)
            .optional()
            .default(8)
            .describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'),
    }),
    outputSchema: genkit_1.z.string(),
}, async ({ query, contextChunks = 8 }) => {
    console.log(`üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: "${query}"`);
    console.log(`üìä –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–æ ${contextChunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);
    // ‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Genkit retriever (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2])
    const hits = await exports.ai.retrieve({
        retriever,
        query,
        options: { k: contextChunks },
    });
    if (!hits.length) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return `‚ÑπÔ∏è  –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. 

üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–ø—É—Å—Ç–∏—Ç–µ knowledgeBaseIndexer)
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞

üí° –°–æ–≤–µ—Ç: –°–ø—Ä–æ—Å–∏—Ç–µ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –∏–ª–∏ API –ø—Ä–æ–µ–∫—Ç–∞ holograms.media`;
    }
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hits.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const sources = [...new Set(hits.map(h => h.metadata?.source || 'unknown'))];
    console.log(`üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${sources.slice(0, 3).map(s => path.basename(s, '.txt')).join(', ')}${sources.length > 3 ? ` –∏ –µ—â–µ ${sources.length - 3}` : ''}`);
    console.log('üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini 1.5 Flash...');
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const contextTxt = hits.map((d, i) => {
        const source = d.metadata?.source ? path.basename(d.metadata.source, '.txt') : 'unknown';
        return `[–ò—Å—Ç–æ—á–Ω–∏–∫ ${i + 1}: ${source}]\n${d.text}`;
    }).join('\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n');
    const prompt = RAG_TEMPLATE
        .replace('{context}', contextTxt)
        .replace('{question}', query);
    // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Genkit (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [2])
    const { text } = await exports.ai.generate({
        model: generativeModel,
        prompt: `${SYSTEM_PROMPT}\n\n${prompt}`,
        config: {
            temperature: 0.3,
            maxOutputTokens: 4096,
        },
    });
    console.log('‚úÖ –û–±—É—á–∞—é—â–∏–π –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    console.log(`üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.length}`);
    return text;
});
/* 3. ‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã */
exports.testKnowledgeBase = exports.ai.defineFlow({
    name: 'testKnowledgeBase',
    inputSchema: genkit_1.z.void(),
    outputSchema: genkit_1.z.string(),
}, async () => {
    const testQueries = [
        "–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ holograms.media?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ Agent Tria?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞–º–∏?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ backend –Ω–∞ FastAPI"
    ];
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞...');
    const results = [];
    for (const query of testQueries) {
        console.log(`üîç –¢–µ—Å—Ç: "${query}"`);
        const hits = await exports.ai.retrieve({
            retriever,
            query,
            options: { k: 3 },
        });
        if (hits.length > 0) {
            const sources = [...new Set(hits.map(h => path.basename(h.metadata?.source || 'unknown', '.txt')))];
            results.push(`‚úÖ "${query}" ‚Üí ${hits.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ [${sources.join(', ')}]`);
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hits.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);
        }
        else {
            results.push(`‚ùå "${query}" ‚Üí –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            console.log(`   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        }
    }
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return `üß™ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê RAG –°–ò–°–¢–ï–ú–´:\n\n${results.join('\n\n')}\n\nüöÄ –ú–æ–¥–µ–ª—å: text-embedding-004 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)`;
});
/* 4. ‚úÖ –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π */
exports.knowledgeBaseStatus = exports.ai.defineFlow({
    name: 'knowledgeBaseStatus',
    inputSchema: genkit_1.z.void(),
    outputSchema: genkit_1.z.object({
        isIndexed: genkit_1.z.boolean(),
        totalDocuments: genkit_1.z.number(),
        lastIndexed: genkit_1.z.string().optional(),
        cacheExists: genkit_1.z.boolean(),
        embeddingModel: genkit_1.z.string(),
        dimensions: genkit_1.z.number(),
    }),
}, async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbPath = path.resolve(process.cwd(), '__db_holograms_media_knowledge.json');
    let isIndexed = false;
    let totalDocuments = 0;
    let lastIndexed;
    try {
        const stats = await fs.stat(dbPath);
        isIndexed = true;
        lastIndexed = stats.mtime.toISOString();
        // –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
        const dbContent = await fs.readFile(dbPath, 'utf-8');
        const dbData = JSON.parse(dbContent);
        totalDocuments = Array.isArray(dbData) ? dbData.length : Object.keys(dbData).length;
    }
    catch (e) {
        // –ë–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ —á–∞–Ω–∫–æ–≤
    const cachePath = path.resolve(process.cwd(), 'chunks_cache.json');
    let cacheExists = false;
    try {
        await fs.stat(cachePath);
        cacheExists = true;
    }
    catch (e) {
        // –ö—ç—à –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    return {
        isIndexed,
        totalDocuments,
        lastIndexed,
        cacheExists,
        embeddingModel: 'text-embedding-004',
        dimensions: 768,
    };
});
/* ‚úÖ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –¥–ª—è CLI –¥–æ—Å—Ç—É–ø–∞ (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ [1]) */
console.log('üöÄ Genkit flows –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è CLI –¥–æ—Å—Ç—É–ø–∞');
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('   genkit flow:run knowledgeBaseIndexer \'{"resumeFromBatch": 0, "batchSize": 25}\'');
console.log('   genkit flow:run askKnowledgeBase \'{"query": "–≤–∞—à –≤–æ–ø—Ä–æ—Å"}\'');
console.log('   genkit flow:run testKnowledgeBase');
console.log('   genkit flow:run knowledgeBaseStatus');
