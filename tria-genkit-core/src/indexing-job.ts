// tria-genkit-core/src/indexing-job.ts
import * as path from 'path';
import * as fs from 'fs/promises';
import { genkit, z } from 'genkit';
import { googleAI, gemini, textEmbedding004 } from '@genkit-ai/googleai';
import postgres from 'postgres';
import pgvector from 'pgvector';
import { TextLoader } from 'langchain/document_loaders/fs/text';
import { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';
import { Document as LangDocument } from '@langchain/core/documents';
import { Document } from '@genkit-ai/ai/retriever';

// ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ê: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤)
const TOTAL_CHUNKS = 130372;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Genkit –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const ai = genkit({
  plugins: [googleAI()],
});

const sql = postgres(process.env.DATABASE_URL!);

async function runCloudIndexing() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤...');
  console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: resumeFromBatch=${process.env.RESUME_FROM_BATCH}, batchSize=${process.env.BATCH_SIZE}`);
  
  const resumeFromBatch = parseInt(process.env.RESUME_FROM_BATCH || '0');
  const batchSize = parseInt(process.env.BATCH_SIZE || '5');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ pgvector
    console.log('üß† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ pgvector...');
    await sql`CREATE EXTENSION IF NOT EXISTS vector`;
    await sql`
        CREATE TABLE IF NOT EXISTS holograms_media_embeddings (
            id SERIAL PRIMARY KEY,
            content TEXT,
            embedding VECTOR(768),
            metadata JSONB
        );
    `;
    
    // ‚úÖ –°–ù–ê–ß–ê–õ–ê –í–°–ï–ì–î–ê –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´
    const processedCount = await sql`SELECT COUNT(*) as count FROM holograms_media_embeddings`;
    const alreadyProcessed = parseInt(processedCount[0]?.count || '0');
    const expectedForThisBatch = resumeFromBatch * batchSize;
    const correctBatch = Math.floor(alreadyProcessed / batchSize);
    
    console.log(`üìä –í –±–∞–∑–µ —É–∂–µ: ${alreadyProcessed} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìä –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è batch ${resumeFromBatch}: ${expectedForThisBatch} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π batch –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ${correctBatch}`);
    console.log(`üìä –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${TOTAL_CHUNKS} —á–∞–Ω–∫–æ–≤`);
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê 1: –í—Å—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (alreadyProcessed >= TOTAL_CHUNKS) {
      console.log('üéâ –í–°–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –£–ñ–ï –ó–ê–í–ï–†–®–ï–ù–ê!');
      console.log(`üìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${alreadyProcessed}/${TOTAL_CHUNKS} –∑–∞–ø–∏—Å–µ–π`);
      process.exit(0);
    }
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê 2: –£–∫–∞–∑–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π batch
    if (Math.abs(correctBatch - resumeFromBatch) > 10) {
      console.log(`‚ö†Ô∏è –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô BATCH!`);
      console.log(`‚ùå –£–∫–∞–∑–∞–Ω resumeFromBatch: ${resumeFromBatch}`);
      console.log(`‚úÖ –ù—É–∂–µ–Ω resumeFromBatch: ${correctBatch}`);
      console.log(`üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ workflow —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º batch!`);
      process.exit(1);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–≤ GitHub Actions)
    const chunksPath = path.resolve(__dirname, '../chunks_cache.json');
    
    let chunks: any[] = [];
    
    if (await fs.access(chunksPath).then(() => true).catch(() => false)) {
      console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞...');
      const cachedData = await fs.readFile(chunksPath, 'utf-8');
      chunks = JSON.parse(cachedData);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞`);
      
      // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£ –µ—Å–ª–∏ –∫—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (chunks.length !== TOTAL_CHUNKS) {
        console.log(`‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –≤ –∫—ç—à–µ (${chunks.length}) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ (${TOTAL_CHUNKS})`);
      }
    } else {
      console.log('üìÇ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // ‚úÖ –ü–†–û–í–ï–†–ö–ê 3: –ú–æ–∂–µ–º –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫—ç—à–∞
      if (alreadyProcessed < expectedForThisBatch) {
        console.log('‚ùå –î–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –º–µ–Ω—å—à–µ —á–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù—É–∂–µ–Ω –∫—ç—à —Ñ–∞–π–ª.');
        console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º uploadChunksCache: true');
        process.exit(1);
      }
      
      // ‚úÖ –ü–†–û–í–ï–†–ö–ê 4: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–æ –Ω–µ—Ç –∫—ç—à–∞ - —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤
      console.log('‚úÖ –î–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —á–∞–Ω–∫–æ–≤...');
      chunks = new Array(TOTAL_CHUNKS).fill({ pageContent: '', metadata: {} });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ ${chunks.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }
    
    const genkitDocs = chunks.map(c => Document.fromText(c.pageContent || '', c.metadata || {}));
    
    const totalBatches = Math.ceil(genkitDocs.length / batchSize);
    console.log(`üìä –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: ${totalBatches}, –Ω–∞—á–∏–Ω–∞–µ–º —Å ${resumeFromBatch}`);
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${alreadyProcessed}/${genkitDocs.length} (${(alreadyProcessed/genkitDocs.length*100).toFixed(1)}%)`);
    
    let processedBatches = 0;
    
    for (let i = resumeFromBatch * batchSize; i < genkitDocs.length; i += batchSize) {
      const batchDocs = genkitDocs.slice(i, i + batchSize);
      const batchNumber = Math.floor(i / batchSize) + 1;
      
      console.log(`üì¶ –ü–∞–∫–µ—Ç ${batchNumber}/${totalBatches} (${batchDocs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
      
      // ‚úÖ –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–£–°–¢–´–ï –ß–ê–ù–ö–ò (–∏–∑ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞)
      const validDocs = batchDocs.filter(doc => doc.text && doc.text.trim().length > 0);
      
      if (validDocs.length === 0) {
        console.log('‚ö†Ô∏è –ü–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        processedBatches++;
        continue;
      }
      
      for (const doc of validDocs) {
        const embeddingResponse = await ai.embed({
          embedder: textEmbedding004,
          content: doc.text,
        });
        
        let embeddingVector: number[];
        if (Array.isArray(embeddingResponse)) {
          embeddingVector = embeddingResponse[0].embedding;
        } else if (embeddingResponse && 'embedding' in embeddingResponse) {
          embeddingVector = (embeddingResponse as any).embedding;
        } else {
          throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞`);
        }
        
        const formattedEmbedding = pgvector.toSql(embeddingVector);
        
        await sql`
          INSERT INTO holograms_media_embeddings (content, embedding, metadata)
          VALUES (${doc.text}, ${formattedEmbedding}, ${doc.metadata as any})
        `;
      }
      
      processedBatches++;
      
      if (processedBatches % 100 === 0) {
        const currentProgress = ((batchNumber / totalBatches) * 100).toFixed(1);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedBatches} –ø–∞–∫–µ—Ç–æ–≤ (${currentProgress}%)`);
        
        // ‚úÖ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°–ê
        const currentCount = await sql`SELECT COUNT(*) as count FROM holograms_media_embeddings`;
        const currentTotal = parseInt(currentCount[0]?.count || '0');
        console.log(`üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${currentTotal}/${genkitDocs.length} –∑–∞–ø–∏—Å–µ–π`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const finalCount = await sql`SELECT COUNT(*) as count FROM holograms_media_embeddings`;
    const finalTotal = parseInt(finalCount[0]?.count || '0');
    console.log(`üìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${finalTotal}/${genkitDocs.length} –∑–∞–ø–∏—Å–µ–π`);
    
    if (finalTotal >= genkitDocs.length) {
      console.log('üéâ –í–°–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!');
    } else {
      console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${genkitDocs.length - finalTotal} –∑–∞–ø–∏—Å–µ–π`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
runCloudIndexing()
  .then(() => {
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
