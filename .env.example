# .env.example

# === Backend Security (FastAPI - if used, and for JWTs if any custom logic remains) ===
SECRET_KEY="your_super_secret_key_please_change_me_#_CHANGE_THIS_IN_YOUR_ACTUAL_.env_FILE!"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES="30"

# === Initial User Credentials (for first-time setup in DB if seeding locally or via a function) ===
INITIAL_ADMIN_EMAIL="admin@example.com"
INITIAL_ADMIN_PASSWORD="change_this_strong_password_admin_#_CHANGE_THIS_IN_YOUR_ACTUAL_.env_FILE!"
INITIAL_TEST_USER_EMAIL="testuser@example.com"
INITIAL_TEST_USER_PASSWORD="change_this_strong_password_testuser_#_CHANGE_THIS_IN_YOUR_ACTUAL_.env_FILE!"

# === LLM Configuration ===
# OPENROUTER_API_KEY="your_openrouter_api_key" # Deprecated
MISTRAL_API_KEY="your_mistral_api_key"
# CODESTRAL_API_KEY="your_codestral_api_key" # If using Codestral models via Mistral API, MISTRAL_API_KEY is used
DEFAULT_LLM_MODEL="mistralai/mistral-small-latest" # Example
CODESTRAL_LLM_MODEL_NAME="mistralai/codestral-latest" # Example

# === Firebase Client-Side SDK Configuration (for frontend/js/core/firebaseInit.js) ===
# These are typically public. Get them from your Firebase project console.
FIREBASE_API_KEY="your_firebase_api_key"
FIREBASE_AUTH_DOMAIN="your_project_id.firebaseapp.com"
FIREBASE_PROJECT_ID="your_project_id"
FIREBASE_STORAGE_BUCKET="your_project_id.appspot.com"
FIREBASE_MESSAGING_SENDER_ID="your_firebase_messaging_sender_id"
FIREBASE_APP_ID="your_firebase_app_id"
FIREBASE_MEASUREMENT_ID="your_firebase_measurement_id" # Optional, for Analytics

# === Google Cloud Configuration (for Backend - Cloud Functions, Storage, Pub/Sub, etc.) ===
# GOOGLE_CLOUD_PROJECT="your_google_cloud_project_id" # Often same as FIREBASE_PROJECT_ID
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-key.json" # For backend services if NOT running on GCP infra (e.g. local dev)
                                                                       # When deployed on Cloud Functions/Run, credentials are often inferred.
# Cloud SQL Instance Connection Name (for Cloud Run/Functions connection via proxy)
# Format: "your_project_id:your_region:your_instance_name"
CLOUD_SQL_INSTANCE_CONNECTION_NAME="" 

# Pub/Sub Topics (examples)
PUB_SUB_TOPIC_CHUNK_PROCESSING="tria-chunk-processing-topic"

# Genkit (if used, placeholder for now)
# GENKIT_API_KEY="your_genkit_api_key" # Unlikely needed, auth usually via GCP service account
# GENKIT_FLOW_HTTP_TRIGGER_URL_PROCESS_INTERACTION_CHUNK="your_genkit_http_flow_url_for_interaction_processing"

# === Database Configuration (Choose ONE: Cloud SQL via Proxy OR Direct to Neon/Supabase OR Local PostgreSQL) ===

# --- Option 1: Google Cloud SQL (Recommended for deployed environments on Cloud Run/Functions if billing is NOT an issue) ---
# Ensure GOOGLE_APPLICATION_CREDENTIALS is set (for local) or service account has "Cloud SQL Client" role (for deployed).
# DB_HOST will typically be /cloudsql/CLOUD_SQL_INSTANCE_CONNECTION_NAME for Cloud SQL Proxy.
# DB_USER="your_cloudsql_user"
# DB_PASSWORD="your_cloudsql_password"
# DB_NAME="holograms_db"
# DB_PORT="5432" # Not used if connecting via Unix socket with proxy

# --- Option 2: Neon.tech / Supabase (or other remote PostgreSQL) ---
# POSTGRES_URL="postgresql://user:password@host.neon.tech:5432/dbname?sslmode=require" # Example for Neon
POSTGRES_USER="your_neon_or_supabase_user"
POSTGRES_PASSWORD="your_neon_or_supabase_password"
POSTGRES_HOST="your_neon_or_supabase_host"
POSTGRES_DB="holograms_db" # Or the DB name provided by Neon/Supabase
POSTGRES_PORT="5432" # Or the port provided

# --- Option 3: Local PostgreSQL Development Setup ---
# POSTGRES_USER_LOCAL="postgres" # Your local PostgreSQL user
# POSTGRES_PASSWORD_LOCAL="your_local_password"
# POSTGRES_HOST_LOCAL="localhost"
# POSTGRES_DB_LOCAL="holograms_db_local"
# POSTGRES_PORT_LOCAL="5432"

# === PostgreSQL Pool Configuration (Optional, sensible defaults are usually fine) ===
# POSTGRES_POOL_MIN_SIZE="5"
# POSTGRES_POOL_MAX_SIZE="20"

# === Other Application-Specific Variables ===
# FRONTEND_URL="http://localhost:3000" # For CORS or links, if backend needs to know
LOG_LEVEL="INFO" # DEBUG, INFO, WARNING, ERROR
